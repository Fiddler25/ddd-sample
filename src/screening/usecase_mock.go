// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/screening/usecase.go

// Package screening is a generated GoMock package.
package screening

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AddNextInterview mocks base method.
func (m *MockUsecase) AddNextInterview(ctx context.Context, screeningID string, interviewDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNextInterview", ctx, screeningID, interviewDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNextInterview indicates an expected call of AddNextInterview.
func (mr *MockUsecaseMockRecorder) AddNextInterview(ctx, screeningID, interviewDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNextInterview", reflect.TypeOf((*MockUsecase)(nil).AddNextInterview), ctx, screeningID, interviewDate)
}

// Apply mocks base method.
func (m *MockUsecase) Apply(ctx context.Context, applicantEmailAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, applicantEmailAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockUsecaseMockRecorder) Apply(ctx, applicantEmailAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockUsecase)(nil).Apply), ctx, applicantEmailAddress)
}

// StartFromPreInterview mocks base method.
func (m *MockUsecase) StartFromPreInterview(ctx context.Context, applicantEmailAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFromPreInterview", ctx, applicantEmailAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartFromPreInterview indicates an expected call of StartFromPreInterview.
func (mr *MockUsecaseMockRecorder) StartFromPreInterview(ctx, applicantEmailAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFromPreInterview", reflect.TypeOf((*MockUsecase)(nil).StartFromPreInterview), ctx, applicantEmailAddress)
}

// StepToNext mocks base method.
func (m *MockUsecase) StepToNext(ctx context.Context, screeningID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StepToNext", ctx, screeningID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StepToNext indicates an expected call of StepToNext.
func (mr *MockUsecaseMockRecorder) StepToNext(ctx, screeningID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StepToNext", reflect.TypeOf((*MockUsecase)(nil).StepToNext), ctx, screeningID)
}
